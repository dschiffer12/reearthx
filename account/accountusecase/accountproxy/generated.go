// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package accountproxy

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// MeMe includes the requested fields of the GraphQL type Me.
type MeMe struct {
	Id string `json:"id"`
}

// GetId returns MeMe.Id, and is useful for accessing the field via an interface.
func (v *MeMe) GetId() string { return v.Id }

// MeResponse is returned by Me on success.
type MeResponse struct {
	Me MeMe `json:"me"`
}

// GetMe returns MeResponse.Me, and is useful for accessing the field via an interface.
func (v *MeResponse) GetMe() MeMe { return v.Me }

// UserByIDsNodesNode includes the requested fields of the GraphQL interface Node.
//
// UserByIDsNodesNode is implemented by the following types:
// UserByIDsNodesUser
// UserByIDsNodesWorkspace
type UserByIDsNodesNode interface {
	implementsGraphQLInterfaceUserByIDsNodesNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *UserByIDsNodesUser) implementsGraphQLInterfaceUserByIDsNodesNode()      {}
func (v *UserByIDsNodesWorkspace) implementsGraphQLInterfaceUserByIDsNodesNode() {}

func __unmarshalUserByIDsNodesNode(b []byte, v *UserByIDsNodesNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "User":
		*v = new(UserByIDsNodesUser)
		return json.Unmarshal(b, *v)
	case "Workspace":
		*v = new(UserByIDsNodesWorkspace)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UserByIDsNodesNode: "%v"`, tn.TypeName)
	}
}

func __marshalUserByIDsNodesNode(v *UserByIDsNodesNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UserByIDsNodesUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*UserByIDsNodesUser
		}{typename, v}
		return json.Marshal(result)
	case *UserByIDsNodesWorkspace:
		typename = "Workspace"

		result := struct {
			TypeName string `json:"__typename"`
			*UserByIDsNodesWorkspace
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UserByIDsNodesNode: "%T"`, v)
	}
}

// UserByIDsNodesUser includes the requested fields of the GraphQL type User.
type UserByIDsNodesUser struct {
	Typename   string                                  `json:"__typename"`
	Id         string                                  `json:"id"`
	Name       string                                  `json:"name"`
	Email      string                                  `json:"email"`
	Workspaces []UserByIDsNodesUserWorkspacesWorkspace `json:"workspaces"`
}

// GetTypename returns UserByIDsNodesUser.Typename, and is useful for accessing the field via an interface.
func (v *UserByIDsNodesUser) GetTypename() string { return v.Typename }

// GetId returns UserByIDsNodesUser.Id, and is useful for accessing the field via an interface.
func (v *UserByIDsNodesUser) GetId() string { return v.Id }

// GetName returns UserByIDsNodesUser.Name, and is useful for accessing the field via an interface.
func (v *UserByIDsNodesUser) GetName() string { return v.Name }

// GetEmail returns UserByIDsNodesUser.Email, and is useful for accessing the field via an interface.
func (v *UserByIDsNodesUser) GetEmail() string { return v.Email }

// GetWorkspaces returns UserByIDsNodesUser.Workspaces, and is useful for accessing the field via an interface.
func (v *UserByIDsNodesUser) GetWorkspaces() []UserByIDsNodesUserWorkspacesWorkspace {
	return v.Workspaces
}

// UserByIDsNodesUserWorkspacesWorkspace includes the requested fields of the GraphQL type Workspace.
type UserByIDsNodesUserWorkspacesWorkspace struct {
	Id string `json:"id"`
}

// GetId returns UserByIDsNodesUserWorkspacesWorkspace.Id, and is useful for accessing the field via an interface.
func (v *UserByIDsNodesUserWorkspacesWorkspace) GetId() string { return v.Id }

// UserByIDsNodesWorkspace includes the requested fields of the GraphQL type Workspace.
type UserByIDsNodesWorkspace struct {
	Typename string `json:"__typename"`
}

// GetTypename returns UserByIDsNodesWorkspace.Typename, and is useful for accessing the field via an interface.
func (v *UserByIDsNodesWorkspace) GetTypename() string { return v.Typename }

// UserByIDsResponse is returned by UserByIDs on success.
type UserByIDsResponse struct {
	Nodes []UserByIDsNodesNode `json:"-"`
}

// GetNodes returns UserByIDsResponse.Nodes, and is useful for accessing the field via an interface.
func (v *UserByIDsResponse) GetNodes() []UserByIDsNodesNode { return v.Nodes }

func (v *UserByIDsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserByIDsResponse
		Nodes []json.RawMessage `json:"nodes"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UserByIDsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Nodes
		src := firstPass.Nodes
		*dst = make(
			[]UserByIDsNodesNode,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalUserByIDsNodesNode(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"Unable to unmarshal UserByIDsResponse.Nodes: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalUserByIDsResponse struct {
	Nodes []json.RawMessage `json:"nodes"`
}

func (v *UserByIDsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserByIDsResponse) __premarshalJSON() (*__premarshalUserByIDsResponse, error) {
	var retval __premarshalUserByIDsResponse

	{

		dst := &retval.Nodes
		src := v.Nodes
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalUserByIDsNodesNode(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UserByIDsResponse.Nodes: %w", err)
			}
		}
	}
	return &retval, nil
}

// __UserByIDsInput is used internally by genqlient
type __UserByIDsInput struct {
	Id []string `json:"id"`
}

// GetId returns __UserByIDsInput.Id, and is useful for accessing the field via an interface.
func (v *__UserByIDsInput) GetId() []string { return v.Id }

func Me(
	ctx context.Context,
	client graphql.Client,
) (*MeResponse, error) {
	req := &graphql.Request{
		OpName: "Me",
		Query: `
query Me {
	me {
		id
	}
}
`,
	}
	var err error

	var data MeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UserByIDs(
	ctx context.Context,
	client graphql.Client,
	id []string,
) (*UserByIDsResponse, error) {
	req := &graphql.Request{
		OpName: "UserByIDs",
		Query: `
query UserByIDs ($id: [ID!]!) {
	nodes(id: $id, type: USER) {
		__typename
		... on User {
			id
			name
			email
			workspaces {
				id
			}
		}
	}
}
`,
		Variables: &__UserByIDsInput{
			Id: id,
		},
	}
	var err error

	var data UserByIDsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
