package migrategen

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"time"

	"github.com/iancoleman/strcase"
)

type Config struct {
	Name string
	Dest string
}

func (a *Config) Execute() error {
	snake := strcase.ToSnake(a.Name)
	camel := strcase.ToCamel(a.Name)
	key := time.Now().Format("060102150405")
	last := filepath.Base(a.Dest)
	data := migration{
		Key:     key,
		Name:    camel,
		Package: last,
	}

	files, err := os.ReadDir(a.Dest)
	if err != nil {
		return fmt.Errorf("unable to get dir: %w", err)
	}

	migrations := make([]migration, 0, len(files)+1)
	for _, file := range files {
		if file.IsDir() {
			continue
		}
		m := migrationFromFileName(file.Name())
		if m == nil {
			continue
		}
		migrations = append(migrations, *m)
	}
	migrations = append(migrations, data)

	buf := bytes.NewBuffer(nil)
	if err := templ.Execute(buf, data); err != nil {
		return fmt.Errorf("unable to generate code: %w", err)
	}

	if err := os.WriteFile(filepath.Join(a.Dest, key+"_"+snake+".go"), buf.Bytes(), 0644); err != nil {
		return fmt.Errorf("unable to write file: %w", err)
	}

	buf = bytes.NewBuffer(nil)
	if err := templ2.Execute(buf, map[string]any{
		"Package":    last,
		"Migrations": migrations,
	}); err != nil {
		return fmt.Errorf("unable to generate code: %w", err)
	}

	if err := os.WriteFile(filepath.Join(a.Dest, "migrations.go"), buf.Bytes(), 0644); err != nil {
		return fmt.Errorf("unable to write file: %w", err)
	}

	return nil
}

type migration struct {
	Key     string
	Name    string
	Package string
}

func migrationFromFileName(n string) (m *migration) {
	if filepath.Ext(n) != ".go" {
		return
	}
	s := strings.SplitN(n[:len(n)-3], "_", 2)
	if len(s) != 2 {
		return
	}
	m = &migration{
		Key:  s[0],
		Name: strcase.ToCamel(s[1]),
	}
	return
}

var templ = template.Must(template.New("generated").Parse(`package {{.Package}}

import "context"

func {{.Name}}(ctx context.Context, c DBClient) error {
	// TODO: Write your migration code here

	// WARNING:
	// If the migration takes too long, the deployment may fail in a serverless environment.
	// Set the batch size to as large a value as possible without using up the RAM of the deployment destination.

	return nil
}
`))

var templ2 = template.Must(template.New("generated2").Parse(`// Code generated by migrategen, DO NOT EDIT.

package {{.Package}}

// To add a new migration, run go run ./tools/cmd/migrategen migration_name

// WARNING:
// If the migration takes too long, the deployment may fail in a serverless environment.
// Set the batch size to as large a value as possible without using up the RAM of the deployment destination.
var migrations = map[int64]MigrationFunc{
{{range .Migrations}}  {{.Key}}: {{.Name}},
{{end}}}
`))
